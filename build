#!/bin/bash
#
# Constructs a makefile for the project
# and then calls make with the arguments
# given to this script.
#
# Overwrites any present file called 'makefile'.

bin_dir="bin"
obj_dir="obj"

if [ ! -d "${bin_dir}" ]; then
  mkdir "${bin_dir}"
fi

if [ ! -d "${obj_dir}" ]; then
  mkdir "${obj_dir}"
fi

objects=""
binary="${bin_dir}/sum"
rules=""

# Make object rules
for file in *.cc; do
  obj="${obj_dir}/${file/%cc/o}"
  objects="$objects $obj"
  dependency=$(g++ -MM -MT "$obj" -std=c++11 $file)
  # Remove implanted newlines
  dependency=$(echo $dependency | sed 's/ \\//g')
  rule=$(printf '%s\n\t$(CC) $(CFLAGS) %s -o %s' "$dependency" "$file" "$obj")
  # Add the rule to the ruleset.
  rules=$(printf '%s\n\n%s' "$rules" "$rule")
done

# build the actual makefile
echo 'CC=g++' > makefile
echo >> makefile
echo 'CFLAGS=-Wall -c -std=c++11' >> makefile
echo 'LINKFLAGS=-Wall -std=c++11 -lSDL2' >> makefile
echo >> makefile
echo "OBJ=$objects" >> makefile
echo "BIN=$binary" >> makefile
echo >> makefile
printf '%s\n\n%s\n\t%s\n\n' 'all: $(OBJ) $(BIN)' 'clean:' 'rm -rf $(OBJ) $(BIN)' >> makefile
printf "%s:%s\n\t%s" "$binary" "$objects" '$(CC) -o $(BIN) $(LINKFLAGS) $(OBJ)' >> makefile
echo "$rules" >> makefile

make "$@"
